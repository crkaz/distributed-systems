// <auto-generated />
using System;
using EntityFrameworkLab;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityFrameworkLab.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200314150907_timestamps")]
    partial class timestamps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityFrameworkLab.Address", b =>
                {
                    b.Property<int>("Address_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("County");

                    b.Property<string>("House_Name_or_Number");

                    b.Property<string>("Postcode");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Street");

                    b.HasKey("Address_ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EntityFrameworkLab.BankAccount", b =>
                {
                    b.Property<int>("AccountIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("AccountIdentifier");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("EntityFrameworkLab.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Address_ID");

                    b.Property<int?>("BankAccountAccountIdentifier");

                    b.Property<DateTime>("Date_of_Birth");

                    b.Property<string>("First_Name");

                    b.Property<string>("Last_Name");

                    b.Property<string>("Middle_Names");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PersonID");

                    b.HasIndex("Address_ID");

                    b.HasIndex("BankAccountAccountIdentifier");

                    b.ToTable("People");
                });

            modelBuilder.Entity("EntityFrameworkLab.Person", b =>
                {
                    b.HasOne("EntityFrameworkLab.Address", "Address")
                        .WithMany("People")
                        .HasForeignKey("Address_ID");

                    b.HasOne("EntityFrameworkLab.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountAccountIdentifier");
                });
#pragma warning restore 612, 618
        }
    }
}
